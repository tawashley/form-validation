{"version":3,"sources":["formalise.ts"],"names":["global","factory","exports","_typeof","module","define","amd","formalise","this","addClass","element","className","classList","add","removeClass","remove","replace","RegExp","split","join","InputValidatityCssClassNames","inputManager","inputElement","formaliseConfig","isInputValid","validity","valid","setInputValidityStatus","Invalid","Valid","validateInputStatus","Pristine","contains","test","Dirty","inputParentSelector","inputRowElement","selector","baseElement","closest","document","documentElement","matches","parentElement","parentNode","nodeType","getClosestElement","blurHandler","onInputBlur","validateOn","blur","addEventListener","validate","formManager","config","inputList","submitHandler","event","formIsValid","firstInvalidInput","preventDefault","map","input","every","inputValidStatus","forEach","focusOnFirstInvalidInput","undefined","find","focus","onFormSubmit","submitFormWhenValid","form","submit","setAttribute","slice","call","querySelectorAll","type","push","inputs","defaultConfig","forms","addForm","completeConfig","Object","assign","configManager"],"mappings":"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","file":"formalise.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('formalise', factory) :\n    (global.formalise = factory());\n}(this, (function () { 'use strict';\n\n    function addClass(element, className) {\r\n        if (element.classList) {\r\n            element.classList.add(className);\r\n        }\r\n        else {\r\n            element.className += \" \" + className;\r\n        }\r\n    }\r\n    function removeClass(element, className) {\r\n        if (element.classList) {\r\n            element.classList.remove(className);\r\n        }\r\n        else {\r\n            element.className = element.className.replace(new RegExp(\"(^|\\\\b)\" + className.split(' ').join('|') + \"(\\\\b|$)\", 'gi'), ' ');\r\n        }\r\n    }\r\n    function hasClass(element, className) {\r\n        if (element.classList) {\r\n            return element.classList.contains(className);\r\n        }\r\n        return new RegExp(\"(^| )\" + className + \"( |$)\", 'gi').test(element.className);\r\n    }\r\n    function getClosestElement(element, selector) {\r\n        var baseElement = element;\r\n        if (baseElement.closest) {\r\n            return baseElement.closest(selector);\r\n        }\r\n        if (!document.documentElement.contains(baseElement)) {\r\n            return null;\r\n        }\r\n        do {\r\n            if (baseElement.matches(selector)) {\r\n                return baseElement;\r\n            }\r\n            baseElement = (baseElement.parentElement || baseElement.parentNode);\r\n        } while (baseElement !== null && baseElement.nodeType === 1);\r\n        return null;\r\n    }\n\n    var InputValidatityCssClassNames;\r\n    (function (InputValidatityCssClassNames) {\r\n        InputValidatityCssClassNames[\"Pristine\"] = \"is-pristine\";\r\n        InputValidatityCssClassNames[\"Dirty\"] = \"is-dirty\";\r\n        InputValidatityCssClassNames[\"Valid\"] = \"is-valid\";\r\n        InputValidatityCssClassNames[\"Invalid\"] = \"is-invalid\";\r\n    })(InputValidatityCssClassNames || (InputValidatityCssClassNames = {}));\r\n    function inputManager(inputElement, formaliseConfig) {\r\n        function isInputValid() {\r\n            return inputElement.validity.valid;\r\n        }\r\n        function inputValidityStatus() {\r\n            return inputElement.validity;\r\n        }\r\n        function setInputValidityStatus(element) {\r\n            if (element === void 0) { element = inputElement; }\r\n            if (isInputValid()) {\r\n                removeClass(element, InputValidatityCssClassNames.Invalid);\r\n                addClass(element, InputValidatityCssClassNames.Valid);\r\n            }\r\n            else {\r\n                removeClass(element, InputValidatityCssClassNames.Valid);\r\n                addClass(element, InputValidatityCssClassNames.Invalid);\r\n            }\r\n        }\r\n        function setInputAsDirty() {\r\n            removeClass(inputElement, InputValidatityCssClassNames.Pristine);\r\n            addClass(inputElement, InputValidatityCssClassNames.Dirty);\r\n        }\r\n        function setInputStatusClass() {\r\n            addClass(inputElement, InputValidatityCssClassNames.Pristine);\r\n        }\r\n        function validateInputStatus() {\r\n            if (hasClass(inputElement, InputValidatityCssClassNames.Pristine)) {\r\n                setInputAsDirty();\r\n            }\r\n            setInputValidityStatus();\r\n            if (formaliseConfig.inputParentSelector !== null && formaliseConfig.inputParentSelector !== '') {\r\n                var inputRowElement = getClosestElement(inputElement, formaliseConfig.inputParentSelector);\r\n                if (inputRowElement) {\r\n                    setInputValidityStatus(inputRowElement);\r\n                }\r\n            }\r\n        }\r\n        function blurHandler() {\r\n            validateInputStatus();\r\n            formaliseConfig.onInputBlur(inputElement, isInputValid(), inputValidityStatus());\r\n        }\r\n        function bindInputBlurEvent() {\r\n            inputElement.addEventListener('blur', blurHandler, false);\r\n        }\r\n        function init() {\r\n            setInputStatusClass();\r\n            if (formaliseConfig.validateOn.blur) {\r\n                bindInputBlurEvent();\r\n            }\r\n        }\r\n        init();\r\n        return {\r\n            element: inputElement,\r\n            validate: validateInputStatus\r\n        };\r\n    }\n\n    function formManager(config) {\r\n        var inputList = [];\r\n        function getAllInputsFromTheForm() {\r\n            var inputs = [].slice.call(config.form.querySelectorAll('input'));\r\n            inputs.forEach(function (input) {\r\n                if (input.type !== 'hidden') {\r\n                    inputList.push(inputManager(input, config));\r\n                }\r\n            });\r\n        }\r\n        function focusOnFirstInvalidInput() {\r\n            var firstInvalidInput = inputList.find(function (input) { return input.element.validity.valid === false; });\r\n            if (firstInvalidInput !== undefined) {\r\n                firstInvalidInput.element.focus();\r\n            }\r\n        }\r\n        function submitHandler(event) {\r\n            var validationMap = [];\r\n            var formIsValid = false;\r\n            event.preventDefault();\r\n            validationMap = inputList.map(function (input) {\r\n                return input.element.validity.valid;\r\n            });\r\n            formIsValid = validationMap.every(function (inputValidStatus) {\r\n                return inputValidStatus === true;\r\n            });\r\n            inputList.forEach(function (input) { return input.validate(); });\r\n            if (config.focusOnFirstInvalidInput) {\r\n                focusOnFirstInvalidInput();\r\n            }\r\n            config.onFormSubmit(formIsValid, inputList);\r\n            if (formIsValid && config.submitFormWhenValid) {\r\n                config.form.submit();\r\n            }\r\n        }\r\n        function attachToSubmitEvent() {\r\n            config.form.addEventListener('submit', submitHandler, false);\r\n        }\r\n        function addNoValidateToForm() {\r\n            config.form.setAttribute('novalidate', 'true');\r\n        }\r\n        function init() {\r\n            addNoValidateToForm();\r\n            getAllInputsFromTheForm();\r\n            attachToSubmitEvent();\r\n        }\r\n        init();\r\n        return {\r\n            form: config.form,\r\n            inputs: inputList\r\n        };\r\n    }\n\n    var defaultConfig = {\r\n        form: {},\r\n        validateOn: {\r\n            blur: true\r\n        },\r\n        submitFormWhenValid: false,\r\n        onInputBlur: function () { },\r\n        onFormSubmit: function () { },\r\n        inputParentSelector: null,\r\n        focusOnFirstInvalidInput: true\r\n    };\r\n    function configManager(config) {\r\n        return Object.assign({}, defaultConfig, config);\r\n    }\n\n    var forms = [];\r\n    function addForm(config) {\r\n        var completeConfig = configManager(config);\r\n        forms.push(formManager(completeConfig));\r\n    }\r\n    var formalise = {\r\n        addForm: addForm,\r\n    };\n\n    return formalise;\n\n})));\n"]}