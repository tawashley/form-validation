{"version":3,"sources":["formalise.js"],"names":["global","factory","exports","_typeof","module","define","amd","formalise","this","addClass","element","className","classList","add","concat","removeClass","remove","replace","RegExp","split","join","inputManager","inputElement","formConfig","cssClassPristine","cssClassDirty","cssClassValid","cssClassInvalid","isInputValid","validity","valid","setInputValidityStatus","arguments","length","undefined","validateInputStatus","contains","test","inputParentSelector","selector","baseElement","closest","document","documentElement","matches","parentElement","parentNode","nodeType","getClosestElement","blurHandler","onInputBlur","validateOn","blur","addEventListener","validate","formManager","config","inputList","submitHandler","event","formIsValid","firstInvalidInput","preventDefault","map","input","every","inputValidStatus","forEach","focusOnFirstInvalidInput","find","focus","onFormSubmit","submitFormWhenValid","form","submit","setAttribute","slice","call","querySelectorAll","type","push","inputs","defaultConfig","Object","freeze","forms","addForm","completeConfig","assign","configManager"],"mappings":"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","file":"formalise.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('formalise', factory) :\n    (global.formalise = factory());\n}(this, (function () { 'use strict';\n\n    function addClass(element, className) {\n        if (element.classList) {\n            element.classList.add(className);\n        } else {\n            element.className += ` ${className}`;\n        }\n    }\n\n    function removeClass(element, className) {\n        if (element.classList) {\n            element.classList.remove(className);\n        } else {\n            element.className = element.className.replace(new RegExp(`(^|\\\\b)${className.split(' ').join('|')}(\\\\b|$)`, 'gi'), ' ');\n        }\n    }\n\n    function hasClass(element, className) {\n        if (element.classList) {\n            return element.classList.contains(className);\n        }\n        return new RegExp(`(^| )${className}( |$)`, 'gi').test(element.className);\n    }\n\n    function getClosestElement(element, selector) {\n        let baseElement = element;\n\n        if (baseElement.closest) {\n            return baseElement.closest(selector);\n        }\n\n        if (!document.documentElement.contains(baseElement)) {\n            return null;\n        }\n\n        do {\n            if (baseElement.matches(selector)) {\n                return baseElement;\n            }\n\n            baseElement = baseElement.parentElement || baseElement.parentNode;\n        } while (baseElement !== null && baseElement.nodeType === 1);\n\n        return null;\n    }\n\n    function inputManager(inputElement, formConfig) {\n        const cssClassPristine = 'is-pristine';\n        const cssClassDirty = 'is-dirty';\n        const cssClassValid = 'is-valid';\n        const cssClassInvalid = 'is-invalid';\n\n        function isInputValid() {\n            return inputElement.validity.valid;\n        }\n\n        function inputValidityStatus() {\n            return inputElement.validity;\n        }\n\n        function setInputValidityStatus(element = inputElement) {\n            if (isInputValid()) {\n                removeClass(element, cssClassInvalid);\n                addClass(element, cssClassValid);\n            } else {\n                removeClass(element, cssClassValid);\n                addClass(element, cssClassInvalid);\n            }\n        }\n\n        function setInputAsDirty() {\n            removeClass(inputElement, cssClassPristine);\n            addClass(inputElement, cssClassDirty);\n        }\n\n        function setInputStatusClass() {\n            addClass(inputElement, cssClassPristine);\n        }\n\n        function validateInputStatus() {\n            if (hasClass(inputElement, cssClassPristine)) {\n                setInputAsDirty();\n            }\n\n            setInputValidityStatus();\n\n            if (formConfig.inputParentSelector !== null && formConfig.inputParentSelector !== '') {\n                const inputRowElement = getClosestElement(inputElement, formConfig.inputParentSelector);\n\n                setInputValidityStatus(inputRowElement);\n            }\n        }\n\n        function blurHandler() {\n            validateInputStatus();\n\n            formConfig.onInputBlur(inputElement, isInputValid(inputElement), inputValidityStatus(inputElement));\n        }\n\n        function bindInputBlurEvent() {\n            inputElement.addEventListener('blur', blurHandler, false);\n        }\n\n        function init() {\n            setInputStatusClass();\n\n            if (formConfig.validateOn.blur) {\n                bindInputBlurEvent();\n            }\n        }\n\n        init();\n\n        return {\n            element: inputElement,\n            validate: validateInputStatus\n        };\n    }\n\n    function formManager(config) {\n        const inputList = [];\n\n        function getAllInputsFromTheForm() {\n            const inputs = [].slice.call(config.form.querySelectorAll('input'));\n\n            inputs.forEach((input) => {\n                if (input.type !== 'hidden') {\n                    inputList.push(inputManager(input, config));\n                }\n            });\n        }\n\n        function focusOnFirstInvalidInput() {\n            const firstInvalidInput = inputList.find((input) => input.element.validity.valid === false);\n\n            if (firstInvalidInput !== undefined) {\n                firstInvalidInput.element.focus();\n            }\n        }\n\n        function submitHandler(event) {\n            let validationMap = [];\n            let formIsValid = false;\n\n            event.preventDefault();\n\n            validationMap = inputList.map((input) => {\n                return input.element.validity.valid;\n            });\n\n            formIsValid = validationMap.every((inputValidStatus) => {\n                return inputValidStatus === true;\n            });\n\n            inputList.forEach((input) => input.validate());\n\n            if (config.focusOnFirstInvalidInput) {\n                focusOnFirstInvalidInput();\n            }\n\n            config.onFormSubmit(formIsValid, inputList);\n\n            if (formIsValid && config.submitFormWhenValid) {\n                config.form.submit();\n            }\n        }\n\n        function attachToSubmitEvent() {\n            config.form.addEventListener('submit', submitHandler, false);\n        }\n\n        function addNoValidateToForm() {\n            config.form.setAttribute('novalidate', true);\n        }\n\n        function init() {\n            addNoValidateToForm();\n            getAllInputsFromTheForm();\n            attachToSubmitEvent();\n        }\n\n        init();\n\n        return {\n            form: config.form,\n            inputs: inputList\n        };\n    }\n\n    const defaultConfig = Object.freeze({\n        form: null,\n        validateOn: {\n            blur: true\n        },\n        submitFormWhenValid: false,\n        onInputBlur() {},\n        onFormSubmit() {},\n        inputParentSelector: null,\n        focusOnFirstInvalidInput: true\n    });\n\n    function configManager(config) {\n        return Object.freeze(Object.assign({}, defaultConfig, config));\n    }\n\n    const forms = [];\n\n    function addForm(config) {\n        const completeConfig = configManager(config);\n\n        forms.push(formManager(completeConfig));\n    }\n\n    var formalise = {\n        addForm\n    };\n\n    return formalise;\n\n})));\n"]}